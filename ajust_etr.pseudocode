// https://isaaccomputerscience.org/concepts/isaac_pseudocode?examBoard=all&stage=all

AMINO_ACID_NAMES = ["ALA", ..., "VAL"]

// Precomputed PDB database with FreeSASA
// Each PDB "ATOM" line contain atomic SASA in the corresponding occupency field
// which can be extracted.
PDB_STRUCTURE_DB

// ducarmeType_to_transferEnergies
TYPE_TO_ETR = {"Csp3" : -0.105, 
                "Csp2" : -0.0134,
                "Hnc"  : -0.0397,
                "Hc"   : 0.0362,
                "O"    : 0.0403,
                "N"    : 0.112,
                "S"    : -0.108}

ATOMIC_TYPES = TYPE_TO_ETR.Keys() 
REF_ETR      = TYPE_TO_ETR.Values()

// Experimental values (Ducarme1998) of the 19 of the 20 natural amino acids
// excluding Proline.
EXP_ETR[19] 
N = 100000 // Number or iterations

new_etr_array[7]
diff_etr_array[7]

FOREACH aa_name IN AMINO_ACID_NAMES
    cur_aa = get_aa_properties(aa_name)


    sign = 1 // Signed adjustment variable (INT)
    ind = 0  // +/- i iteration adjustment variable, depending on the sign variable.

    // Important : atomic type transfert energies that are not in sidechain are 
    // not changed in new_etr_array[7]
    new_etr_array = REF_ETR
    
    l = cur_aa.sidechain.length // Number of atom in sidechain of the current aa
    eint_array[l]
    elip_array[l]
    eimp_array[l]

    // Average sasa for each atom present in aa.
    // (Several atom can share the same atomtic type).
    // Averaged by the total number of structures in the database.
    av_sasa_array = get_average_sasa(aa_name, PDB_STRUCTURE_DB)

    FOR i = 0 TO N-1

        // UPDATE AMINO ACID IMPALA RESTRAINT ----------------------------------

        // Distribute atomic type transfert energies to each sidechain atoms.
        new_etr_unpacked = unpack_etr(cur_aa.sidechain.atoms, new_etr_array)
        // Define C(z) at -0.5 (inside the implicit membrane)
        eint_array = -av_sasa_array * new_etr_unpacked * -0.5
        elip_array = -0.018 * av_sasa_array * -0.5
        eimp_array = cur_aa.eint_array + cur_aa.elip_array
        
        // Compute the total IMPALA restraint (actually side restraint)
        cur_aa.eimp = sum(eimp_array) // Float value
        
        // ---------------------------------------------------------------------
        // AMINO ACID UPDATE AND LOOP EXIT
        // Update current amino acid atomic type with new_etr
        cur_aa.new_etr_array = new_etr_array

        // CONDITIONAL BREAKPOINT
        IF abs(cur_aa.diff_eimp) < FLOAT(i)/N
            BREAK
        ENDIF
        // ---------------------------------------------------------------------
        // TRANSFERT ENERGIES ADJUSTMENT

        // Compute the distance of the current restraint from the experimental value
        cur_aa.diff_eimp = cur_aa.eimp - EXP_ETR[aa_name] // Float value

        // If this distance is greater than the previous one ...
        IF abs(cur_aa.diff_eimp) > abs(cur_aa.previous_eimp - EXP_ETR[aa_name])
            // ... the sign parameter change
            sign =* -1
        ENDIF

        IF sign > 0
            ind += i
        ELSE
            ind -= i
        ENDIF
        
        // (FLOAT(ind)/N) ensures an adjustment of increasing amplitude but 
        // weighted to the total number of iterations.
        // / (1 - diff_etr_array) also allows weighting according to the 
        // distance of the energies of the atomic types present in the side 
        // chain from the reference values.
        // The following assignment effectively excludes atomic types that are 
        // not present in the side chain
        deviation_etr_array = diff_etr_array / REF_ETR
        new_etr_array = REF_ETR + (FLOAT(ind)/N) / (1 - deviation_etr_array)
        diff_etr_array = new_etr_array - REF_ETR

        // ---------------------------------------------------------------------

    NEXT i

    PRINT cur_aa.new_etr_array

NEXT aa_name
